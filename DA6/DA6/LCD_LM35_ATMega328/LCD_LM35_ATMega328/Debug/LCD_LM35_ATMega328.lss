
LCD_LM35_ATMega328.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000010  00800100  000005d2  00000646  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005d2  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000656  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000688  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  000006c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000942  00000000  00000000  00000780  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003dc  00000000  00000000  000010c2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000369  00000000  00000000  0000149e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000194  00000000  00000000  00001808  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002c6  00000000  00000000  0000199c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005bf  00000000  00000000  00001c62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000b0  00000000  00000000  00002221  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 36 00 	jmp	0x6c	; 0x6c <__ctors_end>
   4:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
   c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  10:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  1c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  2c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  34:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  5c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  60:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
  68:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000006c <__ctors_end>:
  6c:	11 24       	eor	r1, r1
  6e:	1f be       	out	0x3f, r1	; 63
  70:	cf ef       	ldi	r28, 0xFF	; 255
  72:	d4 e0       	ldi	r29, 0x04	; 4
  74:	de bf       	out	0x3e, r29	; 62
  76:	cd bf       	out	0x3d, r28	; 61

00000078 <__do_copy_data>:
  78:	11 e0       	ldi	r17, 0x01	; 1
  7a:	a0 e0       	ldi	r26, 0x00	; 0
  7c:	b1 e0       	ldi	r27, 0x01	; 1
  7e:	e2 ed       	ldi	r30, 0xD2	; 210
  80:	f5 e0       	ldi	r31, 0x05	; 5
  82:	02 c0       	rjmp	.+4      	; 0x88 <__do_copy_data+0x10>
  84:	05 90       	lpm	r0, Z+
  86:	0d 92       	st	X+, r0
  88:	a0 31       	cpi	r26, 0x10	; 16
  8a:	b1 07       	cpc	r27, r17
  8c:	d9 f7       	brne	.-10     	; 0x84 <__do_copy_data+0xc>
  8e:	0e 94 23 01 	call	0x246	; 0x246 <main>
  92:	0c 94 e7 02 	jmp	0x5ce	; 0x5ce <_exit>

00000096 <__bad_interrupt>:
  96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <toggle_e>:

#if LCD_IO_MODE
/* toggle Enable Pin to initiate write */
static void toggle_e(void)
{
    lcd_e_high();
  9a:	5e 9a       	sbi	0x0b, 6	; 11
    lcd_e_delay();
  9c:	00 c0       	rjmp	.+0      	; 0x9e <toggle_e+0x4>
    lcd_e_low();
  9e:	5e 98       	cbi	0x0b, 6	; 11
  a0:	08 95       	ret

000000a2 <lcd_write>:
                 0: write instruction
Returns:  none
*************************************************************************/
#if LCD_IO_MODE
static void lcd_write(uint8_t data,uint8_t rs) 
{
  a2:	cf 93       	push	r28
  a4:	df 93       	push	r29
  a6:	d8 2f       	mov	r29, r24
    unsigned char dataBits ;


    if (rs) {   /* write data        (RS=1, RW=0) */
  a8:	66 23       	and	r22, r22
  aa:	11 f0       	breq	.+4      	; 0xb0 <lcd_write+0xe>
       lcd_rs_high();
  ac:	5c 9a       	sbi	0x0b, 4	; 11
  ae:	01 c0       	rjmp	.+2      	; 0xb2 <lcd_write+0x10>
    } else {    /* write instruction (RS=0, RW=0) */
       lcd_rs_low();
  b0:	5c 98       	cbi	0x0b, 4	; 11
    }
    lcd_rw_low();
  b2:	5d 98       	cbi	0x0b, 5	; 11

    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && (LCD_DATA0_PIN == 0) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        /* configure data pins as output */
        DDR(LCD_DATA0_PORT) |= 0x0F;
  b4:	8a b1       	in	r24, 0x0a	; 10
  b6:	8f 60       	ori	r24, 0x0F	; 15
  b8:	8a b9       	out	0x0a, r24	; 10

        /* output high nibble first */
        dataBits = LCD_DATA0_PORT & 0xF0;
  ba:	cb b1       	in	r28, 0x0b	; 11
  bc:	c0 7f       	andi	r28, 0xF0	; 240
        LCD_DATA0_PORT = dataBits |((data>>4)&0x0F);
  be:	8d 2f       	mov	r24, r29
  c0:	82 95       	swap	r24
  c2:	8f 70       	andi	r24, 0x0F	; 15
  c4:	8c 2b       	or	r24, r28
  c6:	8b b9       	out	0x0b, r24	; 11
        lcd_e_toggle();
  c8:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>

        /* output low nibble */
        LCD_DATA0_PORT = dataBits | (data&0x0F);
  cc:	df 70       	andi	r29, 0x0F	; 15
  ce:	dc 2b       	or	r29, r28
  d0:	db b9       	out	0x0b, r29	; 11
        lcd_e_toggle();
  d2:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>

        /* all data pins high (inactive) */
        LCD_DATA0_PORT = dataBits | 0x0F;
  d6:	cf 60       	ori	r28, 0x0F	; 15
  d8:	cb b9       	out	0x0b, r28	; 11
        LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);
        LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);
        LCD_DATA2_PORT |= _BV(LCD_DATA2_PIN);
        LCD_DATA3_PORT |= _BV(LCD_DATA3_PIN);
    }
}
  da:	df 91       	pop	r29
  dc:	cf 91       	pop	r28
  de:	08 95       	ret

000000e0 <lcd_read>:
static uint8_t lcd_read(uint8_t rs) 
{
    uint8_t data;
    
    
    if (rs)
  e0:	88 23       	and	r24, r24
  e2:	11 f0       	breq	.+4      	; 0xe8 <lcd_read+0x8>
        lcd_rs_high();                       /* RS=1: read data      */
  e4:	5c 9a       	sbi	0x0b, 4	; 11
  e6:	01 c0       	rjmp	.+2      	; 0xea <lcd_read+0xa>
    else
        lcd_rs_low();                        /* RS=0: read busy flag */
  e8:	5c 98       	cbi	0x0b, 4	; 11
    lcd_rw_high();                           /* RW=1  read mode      */
  ea:	5d 9a       	sbi	0x0b, 5	; 11
    
    if ( ( &LCD_DATA0_PORT == &LCD_DATA1_PORT) && ( &LCD_DATA1_PORT == &LCD_DATA2_PORT ) && ( &LCD_DATA2_PORT == &LCD_DATA3_PORT )
      && ( LCD_DATA0_PIN == 0 )&& (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) )
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
  ec:	8a b1       	in	r24, 0x0a	; 10
  ee:	80 7f       	andi	r24, 0xF0	; 240
  f0:	8a b9       	out	0x0a, r24	; 10
        
        lcd_e_high();
  f2:	5e 9a       	sbi	0x0b, 6	; 11
        lcd_e_delay();        
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <lcd_read+0x16>
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
  f6:	29 b1       	in	r18, 0x09	; 9
        lcd_e_low();
  f8:	5e 98       	cbi	0x0b, 6	; 11
        
        lcd_e_delay();                       /* Enable 500ns low       */
  fa:	00 c0       	rjmp	.+0      	; 0xfc <lcd_read+0x1c>
        
        lcd_e_high();
  fc:	5e 9a       	sbi	0x0b, 6	; 11
        lcd_e_delay();
  fe:	00 c0       	rjmp	.+0      	; 0x100 <lcd_read+0x20>
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 100:	99 b1       	in	r25, 0x09	; 9
    {
        DDR(LCD_DATA0_PORT) &= 0xF0;         /* configure data pins as input */
        
        lcd_e_high();
        lcd_e_delay();        
        data = PIN(LCD_DATA0_PORT) << 4;     /* read high nibble first */
 102:	22 95       	swap	r18
 104:	20 7f       	andi	r18, 0xF0	; 240
        
        lcd_e_delay();                       /* Enable 500ns low       */
        
        lcd_e_high();
        lcd_e_delay();
        data |= PIN(LCD_DATA0_PORT)&0x0F;    /* read low nibble        */
 106:	89 2f       	mov	r24, r25
 108:	8f 70       	andi	r24, 0x0F	; 15
        lcd_e_low();
 10a:	5e 98       	cbi	0x0b, 6	; 11
        if ( PIN(LCD_DATA2_PORT) & _BV(LCD_DATA2_PIN) ) data |= 0x04;
        if ( PIN(LCD_DATA3_PORT) & _BV(LCD_DATA3_PIN) ) data |= 0x08;        
        lcd_e_low();
    }
    return data;
}
 10c:	82 2b       	or	r24, r18
 10e:	08 95       	ret

00000110 <lcd_waitbusy>:

{
    register uint8_t c;
    
    /* wait until busy flag is cleared */
    while ( (c=lcd_read(0)) & (1<<LCD_BUSY)) {}
 110:	80 e0       	ldi	r24, 0x00	; 0
 112:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_read>
 116:	88 23       	and	r24, r24
 118:	dc f3       	brlt	.-10     	; 0x110 <lcd_waitbusy>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 11a:	88 e0       	ldi	r24, 0x08	; 8
 11c:	90 e0       	ldi	r25, 0x00	; 0
 11e:	01 97       	sbiw	r24, 0x01	; 1
 120:	f1 f7       	brne	.-4      	; 0x11e <lcd_waitbusy+0xe>
    
    /* the address counter is updated 4us after the busy flag is cleared */
    delay(2);

    /* now read the address counter */
    return (lcd_read(0));  // return address counter
 122:	80 e0       	ldi	r24, 0x00	; 0
 124:	0e 94 70 00 	call	0xe0	; 0xe0 <lcd_read>
    
}/* lcd_waitbusy */
 128:	08 95       	ret

0000012a <lcd_command>:
Send LCD controller instruction command
Input:   instruction to send to LCD controller, see HD44780 data sheet
Returns: none
*************************************************************************/
void lcd_command(uint8_t cmd)
{
 12a:	cf 93       	push	r28
 12c:	c8 2f       	mov	r28, r24
    lcd_waitbusy();
 12e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
    lcd_write(cmd,0);
 132:	60 e0       	ldi	r22, 0x00	; 0
 134:	8c 2f       	mov	r24, r28
 136:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
}
 13a:	cf 91       	pop	r28
 13c:	08 95       	ret

0000013e <lcd_gotoxy>:
{
#if LCD_LINES==1
    lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
#endif
#if LCD_LINES==2
    if ( y==0 ) 
 13e:	61 11       	cpse	r22, r1
 140:	04 c0       	rjmp	.+8      	; 0x14a <lcd_gotoxy+0xc>
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE1+x);
 142:	80 58       	subi	r24, 0x80	; 128
 144:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 148:	08 95       	ret
    else
        lcd_command((1<<LCD_DDRAM)+LCD_START_LINE2+x);
 14a:	80 54       	subi	r24, 0x40	; 64
 14c:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 150:	08 95       	ret

00000152 <lcd_clrscr>:
/*************************************************************************
Clear display and set cursor to home position
*************************************************************************/
void lcd_clrscr(void)
{
    lcd_command(1<<LCD_CLR);
 152:	81 e0       	ldi	r24, 0x01	; 1
 154:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 158:	08 95       	ret

0000015a <lcd_putc>:
Display character at current cursor position 
Input:    character to be displayed                                       
Returns:  none
*************************************************************************/
void lcd_putc(char c)
{
 15a:	cf 93       	push	r28
 15c:	c8 2f       	mov	r28, r24
    uint8_t pos;


    pos = lcd_waitbusy();   // read busy-flag and address counter
 15e:	0e 94 88 00 	call	0x110	; 0x110 <lcd_waitbusy>
    if (c=='\n')
 162:	ca 30       	cpi	r28, 0x0A	; 10
 164:	49 f4       	brne	.+18     	; 0x178 <lcd_putc+0x1e>

#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
 166:	80 34       	cpi	r24, 0x40	; 64
 168:	10 f0       	brcs	.+4      	; 0x16e <lcd_putc+0x14>
        addressCounter = LCD_START_LINE2;
    else
        addressCounter = LCD_START_LINE1;
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	01 c0       	rjmp	.+2      	; 0x170 <lcd_putc+0x16>
#if LCD_LINES==1
    addressCounter = 0;
#endif
#if LCD_LINES==2
    if ( pos < (LCD_START_LINE2) )
        addressCounter = LCD_START_LINE2;
 16e:	80 e4       	ldi	r24, 0x40	; 64
        addressCounter = LCD_START_LINE4;
    else 
        addressCounter = LCD_START_LINE1;
#endif
#endif
    lcd_command((1<<LCD_DDRAM)+addressCounter);
 170:	80 58       	subi	r24, 0x80	; 128
 172:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
 176:	04 c0       	rjmp	.+8      	; 0x180 <lcd_putc+0x26>
            lcd_write((1<<LCD_DDRAM)+LCD_START_LINE1,0);
        }
#endif
        lcd_waitbusy();
#endif
        lcd_write(c, 1);
 178:	61 e0       	ldi	r22, 0x01	; 1
 17a:	8c 2f       	mov	r24, r28
 17c:	0e 94 51 00 	call	0xa2	; 0xa2 <lcd_write>
    }

}/* lcd_putc */
 180:	cf 91       	pop	r28
 182:	08 95       	ret

00000184 <lcd_puts>:
Input:    string to be displayed
Returns:  none
*************************************************************************/
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
 184:	cf 93       	push	r28
 186:	df 93       	push	r29
    register char c;

    while ( (c = *s++) ) {
 188:	ec 01       	movw	r28, r24
 18a:	21 96       	adiw	r28, 0x01	; 1
 18c:	fc 01       	movw	r30, r24
 18e:	80 81       	ld	r24, Z
 190:	88 23       	and	r24, r24
 192:	29 f0       	breq	.+10     	; 0x19e <lcd_puts+0x1a>
        lcd_putc(c);
 194:	0e 94 ad 00 	call	0x15a	; 0x15a <lcd_putc>
void lcd_puts(const char *s)
/* print string on lcd (no auto linefeed) */
{
    register char c;

    while ( (c = *s++) ) {
 198:	89 91       	ld	r24, Y+
 19a:	81 11       	cpse	r24, r1
 19c:	fb cf       	rjmp	.-10     	; 0x194 <lcd_puts+0x10>
        lcd_putc(c);
    }

}/* lcd_puts */
 19e:	df 91       	pop	r29
 1a0:	cf 91       	pop	r28
 1a2:	08 95       	ret

000001a4 <lcd_init>:
                   LCD_DISP_ON_CURSOR      display on, cursor on
                   LCD_DISP_CURSOR_BLINK   display on, cursor on flashing
Returns:  none
*************************************************************************/
void lcd_init(uint8_t dispAttr)
{
 1a4:	1f 93       	push	r17
 1a6:	cf 93       	push	r28
 1a8:	df 93       	push	r29
 1aa:	18 2f       	mov	r17, r24
      && ( &LCD_RS_PORT == &LCD_DATA0_PORT) && ( &LCD_RW_PORT == &LCD_DATA0_PORT) && (&LCD_E_PORT == &LCD_DATA0_PORT)
      && (LCD_DATA0_PIN == 0 ) && (LCD_DATA1_PIN == 1) && (LCD_DATA2_PIN == 2) && (LCD_DATA3_PIN == 3) 
      && (LCD_RS_PIN == 4 ) && (LCD_RW_PIN == 5) && (LCD_E_PIN == 6 ) )
    {
        /* configure all port bits as output (all LCD lines on same port) */
        DDR(LCD_DATA0_PORT) |= 0x7F;
 1ac:	9a b1       	in	r25, 0x0a	; 10
 1ae:	9f 67       	ori	r25, 0x7F	; 127
 1b0:	9a b9       	out	0x0a, r25	; 10
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1b2:	e0 e0       	ldi	r30, 0x00	; 0
 1b4:	fa ef       	ldi	r31, 0xFA	; 250
 1b6:	31 97       	sbiw	r30, 0x01	; 1
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <lcd_init+0x12>
        DDR(LCD_DATA3_PORT) |= _BV(LCD_DATA3_PIN);
    }
    delay(16000);        /* wait 16ms or more after power-on       */
    
    /* initial write to lcd is 8bit */
    LCD_DATA1_PORT |= _BV(LCD_DATA1_PIN);  // _BV(LCD_FUNCTION)>>4;
 1ba:	59 9a       	sbi	0x0b, 1	; 11
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
 1bc:	58 9a       	sbi	0x0b, 0	; 11
    lcd_e_toggle();
 1be:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1c2:	e0 e0       	ldi	r30, 0x00	; 0
 1c4:	fe e4       	ldi	r31, 0x4E	; 78
 1c6:	31 97       	sbiw	r30, 0x01	; 1
 1c8:	f1 f7       	brne	.-4      	; 0x1c6 <lcd_init+0x22>
    LCD_DATA0_PORT |= _BV(LCD_DATA0_PIN);  // _BV(LCD_FUNCTION_8BIT)>>4;
    lcd_e_toggle();
    delay(4992);         /* delay, busy flag can't be checked here */
   
    /* repeat last command */ 
    lcd_e_toggle();      
 1ca:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1ce:	c0 e0       	ldi	r28, 0x00	; 0
 1d0:	d1 e0       	ldi	r29, 0x01	; 1
 1d2:	fe 01       	movw	r30, r28
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <lcd_init+0x30>
    /* repeat last command */ 
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */
    
    /* repeat last command a third time */
    lcd_e_toggle();      
 1d8:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1dc:	fe 01       	movw	r30, r28
 1de:	31 97       	sbiw	r30, 0x01	; 1
 1e0:	f1 f7       	brne	.-4      	; 0x1de <lcd_init+0x3a>
    /* repeat last command a third time */
    lcd_e_toggle();      
    delay(64);           /* delay, busy flag can't be checked here */

    /* now configure for 4bit mode */
    LCD_DATA0_PORT &= ~_BV(LCD_DATA0_PIN);   // LCD_FUNCTION_4BIT_1LINE>>4
 1e2:	58 98       	cbi	0x0b, 0	; 11
    lcd_e_toggle();
 1e4:	0e 94 4d 00 	call	0x9a	; 0x9a <toggle_e>
static inline void _delayFourCycles(unsigned int __count)
{
    if ( __count == 0 )    
        __asm__ __volatile__( "rjmp 1f\n 1:" );    // 2 cycles
    else
        __asm__ __volatile__ (
 1e8:	21 97       	sbiw	r28, 0x01	; 1
 1ea:	f1 f7       	brne	.-4      	; 0x1e8 <lcd_init+0x44>
    /* Display with KS0073 controller requires special commands for enabling 4 line mode */
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_ON);
	lcd_command(KS0073_4LINES_MODE);
	lcd_command(KS0073_EXTENDED_FUNCTION_REGISTER_OFF);
#else
    lcd_command(LCD_FUNCTION_DEFAULT);      /* function set: display lines  */
 1ec:	88 e2       	ldi	r24, 0x28	; 40
 1ee:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
#endif
    lcd_command(LCD_DISP_OFF);              /* display off                  */
 1f2:	88 e0       	ldi	r24, 0x08	; 8
 1f4:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
    lcd_clrscr();                           /* display clear                */ 
 1f8:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_clrscr>
    lcd_command(LCD_MODE_DEFAULT);          /* set entry mode               */
 1fc:	86 e0       	ldi	r24, 0x06	; 6
 1fe:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>
    lcd_command(dispAttr);                  /* display/cursor control       */
 202:	81 2f       	mov	r24, r17
 204:	0e 94 95 00 	call	0x12a	; 0x12a <lcd_command>

}/* lcd_init */
 208:	df 91       	pop	r29
 20a:	cf 91       	pop	r28
 20c:	1f 91       	pop	r17
 20e:	08 95       	ret

00000210 <adc_init>:
#include <util/delay.h>
#include "lcd.h"
void adc_init()
{
	// AREF = AVcc
	ADMUX = (1<<REFS0);
 210:	80 e4       	ldi	r24, 0x40	; 64
 212:	80 93 7c 00 	sts	0x007C, r24
	// ADC Enable and prescaler of 128
	ADCSRA = (1<<ADEN);
 216:	80 e8       	ldi	r24, 0x80	; 128
 218:	80 93 7a 00 	sts	0x007A, r24
 21c:	08 95       	ret

0000021e <adc_read>:
// read adc value
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	ch &= 0b00000111;  // AND operation with 7
	ADMUX = (ADMUX & 0xF8)|ch;
 21e:	ec e7       	ldi	r30, 0x7C	; 124
 220:	f0 e0       	ldi	r31, 0x00	; 0
 222:	90 81       	ld	r25, Z
}
// read adc value
uint16_t adc_read(uint8_t ch)
{
	// select the corresponding channel 0~7
	ch &= 0b00000111;  // AND operation with 7
 224:	87 70       	andi	r24, 0x07	; 7
	ADMUX = (ADMUX & 0xF8)|ch;
 226:	98 7f       	andi	r25, 0xF8	; 248
 228:	89 2b       	or	r24, r25
 22a:	80 83       	st	Z, r24
	// start single conversion
	// write '1' to ADSC
	ADCSRA |= (1<<ADSC);
 22c:	ea e7       	ldi	r30, 0x7A	; 122
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	80 64       	ori	r24, 0x40	; 64
 234:	80 83       	st	Z, r24
	// wait for conversion to complete
	// ADSC becomes '0' again
	while(ADCSRA & (1<<ADSC));
 236:	80 81       	ld	r24, Z
 238:	86 fd       	sbrc	r24, 6
 23a:	fd cf       	rjmp	.-6      	; 0x236 <adc_read+0x18>
	return (ADC);
 23c:	80 91 78 00 	lds	r24, 0x0078
 240:	90 91 79 00 	lds	r25, 0x0079
}
 244:	08 95       	ret

00000246 <main>:
int main()
{
 246:	cf 93       	push	r28
 248:	df 93       	push	r29
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	2a 97       	sbiw	r28, 0x0a	; 10
 250:	0f b6       	in	r0, 0x3f	; 63
 252:	f8 94       	cli
 254:	de bf       	out	0x3e, r29	; 62
 256:	0f be       	out	0x3f, r0	; 63
 258:	cd bf       	out	0x3d, r28	; 61
	uint16_t adc_result0;
	int temp;
	char buffer[10];
	// initialize adc and lcd
	adc_init();
 25a:	0e 94 08 01 	call	0x210	; 0x210 <adc_init>
	lcd_init(LCD_DISP_ON_CURSOR);
 25e:	8e e0       	ldi	r24, 0x0E	; 14
 260:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <lcd_init>
	lcd_clrscr();
 264:	0e 94 a9 00 	call	0x152	; 0x152 <lcd_clrscr>
	lcd_gotoxy(0,0);
 268:	60 e0       	ldi	r22, 0x00	; 0
 26a:	80 e0       	ldi	r24, 0x00	; 0
 26c:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_gotoxy>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 270:	8f e1       	ldi	r24, 0x1F	; 31
 272:	9e e4       	ldi	r25, 0x4E	; 78
 274:	01 97       	sbiw	r24, 0x01	; 1
 276:	f1 f7       	brne	.-4      	; 0x274 <main+0x2e>
 278:	00 c0       	rjmp	.+0      	; 0x27a <main+0x34>
 27a:	00 00       	nop
	_delay_ms(50);
	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 0f 01 	call	0x21e	; 0x21e <adc_read>
 282:	8c 01       	movw	r16, r24
		temp=adc_result0/16.0;   // finding the temperature
		lcd_gotoxy(0,0);
 284:	60 e0       	ldi	r22, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	0e 94 9f 00 	call	0x13e	; 0x13e <lcd_gotoxy>
	lcd_gotoxy(0,0);
	_delay_ms(50);
	while(1)
	{
		adc_result0 = adc_read(0);      // read adc value at PA0
		temp=adc_result0/16.0;   // finding the temperature
 28c:	b8 01       	movw	r22, r16
 28e:	80 e0       	ldi	r24, 0x00	; 0
 290:	90 e0       	ldi	r25, 0x00	; 0
 292:	0e 94 ac 01 	call	0x358	; 0x358 <__floatunsisf>
 296:	20 e0       	ldi	r18, 0x00	; 0
 298:	30 e0       	ldi	r19, 0x00	; 0
 29a:	40 e8       	ldi	r20, 0x80	; 128
 29c:	5d e3       	ldi	r21, 0x3D	; 61
 29e:	0e 94 12 02 	call	0x424	; 0x424 <__mulsf3>
 2a2:	0e 94 76 01 	call	0x2ec	; 0x2ec <__fixsfsi>
 2a6:	dc 01       	movw	r26, r24
 2a8:	cb 01       	movw	r24, r22
		lcd_gotoxy(0,0);
		itoa(temp,buffer,10);
 2aa:	4a e0       	ldi	r20, 0x0A	; 10
 2ac:	50 e0       	ldi	r21, 0x00	; 0
 2ae:	be 01       	movw	r22, r28
 2b0:	6f 5f       	subi	r22, 0xFF	; 255
 2b2:	7f 4f       	sbci	r23, 0xFF	; 255
 2b4:	0e 94 a7 02 	call	0x54e	; 0x54e <itoa>
		lcd_puts("Temperature=");   //display temperature
 2b8:	80 e0       	ldi	r24, 0x00	; 0
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_puts>
		lcd_puts(buffer);
 2c0:	ce 01       	movw	r24, r28
 2c2:	01 96       	adiw	r24, 0x01	; 1
 2c4:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_puts>
		lcd_puts(" ");   //display temperature
 2c8:	8d e0       	ldi	r24, 0x0D	; 13
 2ca:	91 e0       	ldi	r25, 0x01	; 1
 2cc:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_puts>
		lcd_puts(" ");   //display temperature
 2d0:	8d e0       	ldi	r24, 0x0D	; 13
 2d2:	91 e0       	ldi	r25, 0x01	; 1
 2d4:	0e 94 c2 00 	call	0x184	; 0x184 <lcd_puts>
 2d8:	9f ef       	ldi	r25, 0xFF	; 255
 2da:	20 e7       	ldi	r18, 0x70	; 112
 2dc:	82 e0       	ldi	r24, 0x02	; 2
 2de:	91 50       	subi	r25, 0x01	; 1
 2e0:	20 40       	sbci	r18, 0x00	; 0
 2e2:	80 40       	sbci	r24, 0x00	; 0
 2e4:	e1 f7       	brne	.-8      	; 0x2de <main+0x98>
 2e6:	00 c0       	rjmp	.+0      	; 0x2e8 <main+0xa2>
 2e8:	00 00       	nop
 2ea:	c8 cf       	rjmp	.-112    	; 0x27c <main+0x36>

000002ec <__fixsfsi>:
 2ec:	0e 94 7d 01 	call	0x2fa	; 0x2fa <__fixunssfsi>
 2f0:	68 94       	set
 2f2:	b1 11       	cpse	r27, r1
 2f4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_szero>
 2f8:	08 95       	ret

000002fa <__fixunssfsi>:
 2fa:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <__fp_splitA>
 2fe:	88 f0       	brcs	.+34     	; 0x322 <__fixunssfsi+0x28>
 300:	9f 57       	subi	r25, 0x7F	; 127
 302:	98 f0       	brcs	.+38     	; 0x32a <__fixunssfsi+0x30>
 304:	b9 2f       	mov	r27, r25
 306:	99 27       	eor	r25, r25
 308:	b7 51       	subi	r27, 0x17	; 23
 30a:	b0 f0       	brcs	.+44     	; 0x338 <__fixunssfsi+0x3e>
 30c:	e1 f0       	breq	.+56     	; 0x346 <__fixunssfsi+0x4c>
 30e:	66 0f       	add	r22, r22
 310:	77 1f       	adc	r23, r23
 312:	88 1f       	adc	r24, r24
 314:	99 1f       	adc	r25, r25
 316:	1a f0       	brmi	.+6      	; 0x31e <__fixunssfsi+0x24>
 318:	ba 95       	dec	r27
 31a:	c9 f7       	brne	.-14     	; 0x30e <__fixunssfsi+0x14>
 31c:	14 c0       	rjmp	.+40     	; 0x346 <__fixunssfsi+0x4c>
 31e:	b1 30       	cpi	r27, 0x01	; 1
 320:	91 f0       	breq	.+36     	; 0x346 <__fixunssfsi+0x4c>
 322:	0e 94 0b 02 	call	0x416	; 0x416 <__fp_zero>
 326:	b1 e0       	ldi	r27, 0x01	; 1
 328:	08 95       	ret
 32a:	0c 94 0b 02 	jmp	0x416	; 0x416 <__fp_zero>
 32e:	67 2f       	mov	r22, r23
 330:	78 2f       	mov	r23, r24
 332:	88 27       	eor	r24, r24
 334:	b8 5f       	subi	r27, 0xF8	; 248
 336:	39 f0       	breq	.+14     	; 0x346 <__fixunssfsi+0x4c>
 338:	b9 3f       	cpi	r27, 0xF9	; 249
 33a:	cc f3       	brlt	.-14     	; 0x32e <__fixunssfsi+0x34>
 33c:	86 95       	lsr	r24
 33e:	77 95       	ror	r23
 340:	67 95       	ror	r22
 342:	b3 95       	inc	r27
 344:	d9 f7       	brne	.-10     	; 0x33c <__fixunssfsi+0x42>
 346:	3e f4       	brtc	.+14     	; 0x356 <__fixunssfsi+0x5c>
 348:	90 95       	com	r25
 34a:	80 95       	com	r24
 34c:	70 95       	com	r23
 34e:	61 95       	neg	r22
 350:	7f 4f       	sbci	r23, 0xFF	; 255
 352:	8f 4f       	sbci	r24, 0xFF	; 255
 354:	9f 4f       	sbci	r25, 0xFF	; 255
 356:	08 95       	ret

00000358 <__floatunsisf>:
 358:	e8 94       	clt
 35a:	09 c0       	rjmp	.+18     	; 0x36e <__floatsisf+0x12>

0000035c <__floatsisf>:
 35c:	97 fb       	bst	r25, 7
 35e:	3e f4       	brtc	.+14     	; 0x36e <__floatsisf+0x12>
 360:	90 95       	com	r25
 362:	80 95       	com	r24
 364:	70 95       	com	r23
 366:	61 95       	neg	r22
 368:	7f 4f       	sbci	r23, 0xFF	; 255
 36a:	8f 4f       	sbci	r24, 0xFF	; 255
 36c:	9f 4f       	sbci	r25, 0xFF	; 255
 36e:	99 23       	and	r25, r25
 370:	a9 f0       	breq	.+42     	; 0x39c <__floatsisf+0x40>
 372:	f9 2f       	mov	r31, r25
 374:	96 e9       	ldi	r25, 0x96	; 150
 376:	bb 27       	eor	r27, r27
 378:	93 95       	inc	r25
 37a:	f6 95       	lsr	r31
 37c:	87 95       	ror	r24
 37e:	77 95       	ror	r23
 380:	67 95       	ror	r22
 382:	b7 95       	ror	r27
 384:	f1 11       	cpse	r31, r1
 386:	f8 cf       	rjmp	.-16     	; 0x378 <__floatsisf+0x1c>
 388:	fa f4       	brpl	.+62     	; 0x3c8 <__floatsisf+0x6c>
 38a:	bb 0f       	add	r27, r27
 38c:	11 f4       	brne	.+4      	; 0x392 <__floatsisf+0x36>
 38e:	60 ff       	sbrs	r22, 0
 390:	1b c0       	rjmp	.+54     	; 0x3c8 <__floatsisf+0x6c>
 392:	6f 5f       	subi	r22, 0xFF	; 255
 394:	7f 4f       	sbci	r23, 0xFF	; 255
 396:	8f 4f       	sbci	r24, 0xFF	; 255
 398:	9f 4f       	sbci	r25, 0xFF	; 255
 39a:	16 c0       	rjmp	.+44     	; 0x3c8 <__floatsisf+0x6c>
 39c:	88 23       	and	r24, r24
 39e:	11 f0       	breq	.+4      	; 0x3a4 <__floatsisf+0x48>
 3a0:	96 e9       	ldi	r25, 0x96	; 150
 3a2:	11 c0       	rjmp	.+34     	; 0x3c6 <__floatsisf+0x6a>
 3a4:	77 23       	and	r23, r23
 3a6:	21 f0       	breq	.+8      	; 0x3b0 <__floatsisf+0x54>
 3a8:	9e e8       	ldi	r25, 0x8E	; 142
 3aa:	87 2f       	mov	r24, r23
 3ac:	76 2f       	mov	r23, r22
 3ae:	05 c0       	rjmp	.+10     	; 0x3ba <__floatsisf+0x5e>
 3b0:	66 23       	and	r22, r22
 3b2:	71 f0       	breq	.+28     	; 0x3d0 <__floatsisf+0x74>
 3b4:	96 e8       	ldi	r25, 0x86	; 134
 3b6:	86 2f       	mov	r24, r22
 3b8:	70 e0       	ldi	r23, 0x00	; 0
 3ba:	60 e0       	ldi	r22, 0x00	; 0
 3bc:	2a f0       	brmi	.+10     	; 0x3c8 <__floatsisf+0x6c>
 3be:	9a 95       	dec	r25
 3c0:	66 0f       	add	r22, r22
 3c2:	77 1f       	adc	r23, r23
 3c4:	88 1f       	adc	r24, r24
 3c6:	da f7       	brpl	.-10     	; 0x3be <__floatsisf+0x62>
 3c8:	88 0f       	add	r24, r24
 3ca:	96 95       	lsr	r25
 3cc:	87 95       	ror	r24
 3ce:	97 f9       	bld	r25, 7
 3d0:	08 95       	ret

000003d2 <__fp_split3>:
 3d2:	57 fd       	sbrc	r21, 7
 3d4:	90 58       	subi	r25, 0x80	; 128
 3d6:	44 0f       	add	r20, r20
 3d8:	55 1f       	adc	r21, r21
 3da:	59 f0       	breq	.+22     	; 0x3f2 <__fp_splitA+0x10>
 3dc:	5f 3f       	cpi	r21, 0xFF	; 255
 3de:	71 f0       	breq	.+28     	; 0x3fc <__fp_splitA+0x1a>
 3e0:	47 95       	ror	r20

000003e2 <__fp_splitA>:
 3e2:	88 0f       	add	r24, r24
 3e4:	97 fb       	bst	r25, 7
 3e6:	99 1f       	adc	r25, r25
 3e8:	61 f0       	breq	.+24     	; 0x402 <__fp_splitA+0x20>
 3ea:	9f 3f       	cpi	r25, 0xFF	; 255
 3ec:	79 f0       	breq	.+30     	; 0x40c <__fp_splitA+0x2a>
 3ee:	87 95       	ror	r24
 3f0:	08 95       	ret
 3f2:	12 16       	cp	r1, r18
 3f4:	13 06       	cpc	r1, r19
 3f6:	14 06       	cpc	r1, r20
 3f8:	55 1f       	adc	r21, r21
 3fa:	f2 cf       	rjmp	.-28     	; 0x3e0 <__fp_split3+0xe>
 3fc:	46 95       	lsr	r20
 3fe:	f1 df       	rcall	.-30     	; 0x3e2 <__fp_splitA>
 400:	08 c0       	rjmp	.+16     	; 0x412 <__fp_splitA+0x30>
 402:	16 16       	cp	r1, r22
 404:	17 06       	cpc	r1, r23
 406:	18 06       	cpc	r1, r24
 408:	99 1f       	adc	r25, r25
 40a:	f1 cf       	rjmp	.-30     	; 0x3ee <__fp_splitA+0xc>
 40c:	86 95       	lsr	r24
 40e:	71 05       	cpc	r23, r1
 410:	61 05       	cpc	r22, r1
 412:	08 94       	sec
 414:	08 95       	ret

00000416 <__fp_zero>:
 416:	e8 94       	clt

00000418 <__fp_szero>:
 418:	bb 27       	eor	r27, r27
 41a:	66 27       	eor	r22, r22
 41c:	77 27       	eor	r23, r23
 41e:	cb 01       	movw	r24, r22
 420:	97 f9       	bld	r25, 7
 422:	08 95       	ret

00000424 <__mulsf3>:
 424:	0e 94 25 02 	call	0x44a	; 0x44a <__mulsf3x>
 428:	0c 94 96 02 	jmp	0x52c	; 0x52c <__fp_round>
 42c:	0e 94 88 02 	call	0x510	; 0x510 <__fp_pscA>
 430:	38 f0       	brcs	.+14     	; 0x440 <__mulsf3+0x1c>
 432:	0e 94 8f 02 	call	0x51e	; 0x51e <__fp_pscB>
 436:	20 f0       	brcs	.+8      	; 0x440 <__mulsf3+0x1c>
 438:	95 23       	and	r25, r21
 43a:	11 f0       	breq	.+4      	; 0x440 <__mulsf3+0x1c>
 43c:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_inf>
 440:	0c 94 85 02 	jmp	0x50a	; 0x50a <__fp_nan>
 444:	11 24       	eor	r1, r1
 446:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_szero>

0000044a <__mulsf3x>:
 44a:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <__fp_split3>
 44e:	70 f3       	brcs	.-36     	; 0x42c <__mulsf3+0x8>

00000450 <__mulsf3_pse>:
 450:	95 9f       	mul	r25, r21
 452:	c1 f3       	breq	.-16     	; 0x444 <__mulsf3+0x20>
 454:	95 0f       	add	r25, r21
 456:	50 e0       	ldi	r21, 0x00	; 0
 458:	55 1f       	adc	r21, r21
 45a:	62 9f       	mul	r22, r18
 45c:	f0 01       	movw	r30, r0
 45e:	72 9f       	mul	r23, r18
 460:	bb 27       	eor	r27, r27
 462:	f0 0d       	add	r31, r0
 464:	b1 1d       	adc	r27, r1
 466:	63 9f       	mul	r22, r19
 468:	aa 27       	eor	r26, r26
 46a:	f0 0d       	add	r31, r0
 46c:	b1 1d       	adc	r27, r1
 46e:	aa 1f       	adc	r26, r26
 470:	64 9f       	mul	r22, r20
 472:	66 27       	eor	r22, r22
 474:	b0 0d       	add	r27, r0
 476:	a1 1d       	adc	r26, r1
 478:	66 1f       	adc	r22, r22
 47a:	82 9f       	mul	r24, r18
 47c:	22 27       	eor	r18, r18
 47e:	b0 0d       	add	r27, r0
 480:	a1 1d       	adc	r26, r1
 482:	62 1f       	adc	r22, r18
 484:	73 9f       	mul	r23, r19
 486:	b0 0d       	add	r27, r0
 488:	a1 1d       	adc	r26, r1
 48a:	62 1f       	adc	r22, r18
 48c:	83 9f       	mul	r24, r19
 48e:	a0 0d       	add	r26, r0
 490:	61 1d       	adc	r22, r1
 492:	22 1f       	adc	r18, r18
 494:	74 9f       	mul	r23, r20
 496:	33 27       	eor	r19, r19
 498:	a0 0d       	add	r26, r0
 49a:	61 1d       	adc	r22, r1
 49c:	23 1f       	adc	r18, r19
 49e:	84 9f       	mul	r24, r20
 4a0:	60 0d       	add	r22, r0
 4a2:	21 1d       	adc	r18, r1
 4a4:	82 2f       	mov	r24, r18
 4a6:	76 2f       	mov	r23, r22
 4a8:	6a 2f       	mov	r22, r26
 4aa:	11 24       	eor	r1, r1
 4ac:	9f 57       	subi	r25, 0x7F	; 127
 4ae:	50 40       	sbci	r21, 0x00	; 0
 4b0:	9a f0       	brmi	.+38     	; 0x4d8 <__mulsf3_pse+0x88>
 4b2:	f1 f0       	breq	.+60     	; 0x4f0 <__mulsf3_pse+0xa0>
 4b4:	88 23       	and	r24, r24
 4b6:	4a f0       	brmi	.+18     	; 0x4ca <__mulsf3_pse+0x7a>
 4b8:	ee 0f       	add	r30, r30
 4ba:	ff 1f       	adc	r31, r31
 4bc:	bb 1f       	adc	r27, r27
 4be:	66 1f       	adc	r22, r22
 4c0:	77 1f       	adc	r23, r23
 4c2:	88 1f       	adc	r24, r24
 4c4:	91 50       	subi	r25, 0x01	; 1
 4c6:	50 40       	sbci	r21, 0x00	; 0
 4c8:	a9 f7       	brne	.-22     	; 0x4b4 <__mulsf3_pse+0x64>
 4ca:	9e 3f       	cpi	r25, 0xFE	; 254
 4cc:	51 05       	cpc	r21, r1
 4ce:	80 f0       	brcs	.+32     	; 0x4f0 <__mulsf3_pse+0xa0>
 4d0:	0c 94 7f 02 	jmp	0x4fe	; 0x4fe <__fp_inf>
 4d4:	0c 94 0c 02 	jmp	0x418	; 0x418 <__fp_szero>
 4d8:	5f 3f       	cpi	r21, 0xFF	; 255
 4da:	e4 f3       	brlt	.-8      	; 0x4d4 <__mulsf3_pse+0x84>
 4dc:	98 3e       	cpi	r25, 0xE8	; 232
 4de:	d4 f3       	brlt	.-12     	; 0x4d4 <__mulsf3_pse+0x84>
 4e0:	86 95       	lsr	r24
 4e2:	77 95       	ror	r23
 4e4:	67 95       	ror	r22
 4e6:	b7 95       	ror	r27
 4e8:	f7 95       	ror	r31
 4ea:	e7 95       	ror	r30
 4ec:	9f 5f       	subi	r25, 0xFF	; 255
 4ee:	c1 f7       	brne	.-16     	; 0x4e0 <__mulsf3_pse+0x90>
 4f0:	fe 2b       	or	r31, r30
 4f2:	88 0f       	add	r24, r24
 4f4:	91 1d       	adc	r25, r1
 4f6:	96 95       	lsr	r25
 4f8:	87 95       	ror	r24
 4fa:	97 f9       	bld	r25, 7
 4fc:	08 95       	ret

000004fe <__fp_inf>:
 4fe:	97 f9       	bld	r25, 7
 500:	9f 67       	ori	r25, 0x7F	; 127
 502:	80 e8       	ldi	r24, 0x80	; 128
 504:	70 e0       	ldi	r23, 0x00	; 0
 506:	60 e0       	ldi	r22, 0x00	; 0
 508:	08 95       	ret

0000050a <__fp_nan>:
 50a:	9f ef       	ldi	r25, 0xFF	; 255
 50c:	80 ec       	ldi	r24, 0xC0	; 192
 50e:	08 95       	ret

00000510 <__fp_pscA>:
 510:	00 24       	eor	r0, r0
 512:	0a 94       	dec	r0
 514:	16 16       	cp	r1, r22
 516:	17 06       	cpc	r1, r23
 518:	18 06       	cpc	r1, r24
 51a:	09 06       	cpc	r0, r25
 51c:	08 95       	ret

0000051e <__fp_pscB>:
 51e:	00 24       	eor	r0, r0
 520:	0a 94       	dec	r0
 522:	12 16       	cp	r1, r18
 524:	13 06       	cpc	r1, r19
 526:	14 06       	cpc	r1, r20
 528:	05 06       	cpc	r0, r21
 52a:	08 95       	ret

0000052c <__fp_round>:
 52c:	09 2e       	mov	r0, r25
 52e:	03 94       	inc	r0
 530:	00 0c       	add	r0, r0
 532:	11 f4       	brne	.+4      	; 0x538 <__fp_round+0xc>
 534:	88 23       	and	r24, r24
 536:	52 f0       	brmi	.+20     	; 0x54c <__fp_round+0x20>
 538:	bb 0f       	add	r27, r27
 53a:	40 f4       	brcc	.+16     	; 0x54c <__fp_round+0x20>
 53c:	bf 2b       	or	r27, r31
 53e:	11 f4       	brne	.+4      	; 0x544 <__fp_round+0x18>
 540:	60 ff       	sbrs	r22, 0
 542:	04 c0       	rjmp	.+8      	; 0x54c <__fp_round+0x20>
 544:	6f 5f       	subi	r22, 0xFF	; 255
 546:	7f 4f       	sbci	r23, 0xFF	; 255
 548:	8f 4f       	sbci	r24, 0xFF	; 255
 54a:	9f 4f       	sbci	r25, 0xFF	; 255
 54c:	08 95       	ret

0000054e <itoa>:
 54e:	45 32       	cpi	r20, 0x25	; 37
 550:	51 05       	cpc	r21, r1
 552:	20 f4       	brcc	.+8      	; 0x55c <itoa+0xe>
 554:	42 30       	cpi	r20, 0x02	; 2
 556:	10 f0       	brcs	.+4      	; 0x55c <itoa+0xe>
 558:	0c 94 b2 02 	jmp	0x564	; 0x564 <__itoa_ncheck>
 55c:	fb 01       	movw	r30, r22
 55e:	10 82       	st	Z, r1
 560:	cb 01       	movw	r24, r22
 562:	08 95       	ret

00000564 <__itoa_ncheck>:
 564:	bb 27       	eor	r27, r27
 566:	4a 30       	cpi	r20, 0x0A	; 10
 568:	31 f4       	brne	.+12     	; 0x576 <__itoa_ncheck+0x12>
 56a:	99 23       	and	r25, r25
 56c:	22 f4       	brpl	.+8      	; 0x576 <__itoa_ncheck+0x12>
 56e:	bd e2       	ldi	r27, 0x2D	; 45
 570:	90 95       	com	r25
 572:	81 95       	neg	r24
 574:	9f 4f       	sbci	r25, 0xFF	; 255
 576:	0c 94 be 02 	jmp	0x57c	; 0x57c <__utoa_common>

0000057a <__utoa_ncheck>:
 57a:	bb 27       	eor	r27, r27

0000057c <__utoa_common>:
 57c:	fb 01       	movw	r30, r22
 57e:	55 27       	eor	r21, r21
 580:	aa 27       	eor	r26, r26
 582:	88 0f       	add	r24, r24
 584:	99 1f       	adc	r25, r25
 586:	aa 1f       	adc	r26, r26
 588:	a4 17       	cp	r26, r20
 58a:	10 f0       	brcs	.+4      	; 0x590 <__utoa_common+0x14>
 58c:	a4 1b       	sub	r26, r20
 58e:	83 95       	inc	r24
 590:	50 51       	subi	r21, 0x10	; 16
 592:	b9 f7       	brne	.-18     	; 0x582 <__utoa_common+0x6>
 594:	a0 5d       	subi	r26, 0xD0	; 208
 596:	aa 33       	cpi	r26, 0x3A	; 58
 598:	08 f0       	brcs	.+2      	; 0x59c <__utoa_common+0x20>
 59a:	a9 5d       	subi	r26, 0xD9	; 217
 59c:	a1 93       	st	Z+, r26
 59e:	00 97       	sbiw	r24, 0x00	; 0
 5a0:	79 f7       	brne	.-34     	; 0x580 <__utoa_common+0x4>
 5a2:	b1 11       	cpse	r27, r1
 5a4:	b1 93       	st	Z+, r27
 5a6:	11 92       	st	Z+, r1
 5a8:	cb 01       	movw	r24, r22
 5aa:	0c 94 d7 02 	jmp	0x5ae	; 0x5ae <strrev>

000005ae <strrev>:
 5ae:	dc 01       	movw	r26, r24
 5b0:	fc 01       	movw	r30, r24
 5b2:	67 2f       	mov	r22, r23
 5b4:	71 91       	ld	r23, Z+
 5b6:	77 23       	and	r23, r23
 5b8:	e1 f7       	brne	.-8      	; 0x5b2 <strrev+0x4>
 5ba:	32 97       	sbiw	r30, 0x02	; 2
 5bc:	04 c0       	rjmp	.+8      	; 0x5c6 <strrev+0x18>
 5be:	7c 91       	ld	r23, X
 5c0:	6d 93       	st	X+, r22
 5c2:	70 83       	st	Z, r23
 5c4:	62 91       	ld	r22, -Z
 5c6:	ae 17       	cp	r26, r30
 5c8:	bf 07       	cpc	r27, r31
 5ca:	c8 f3       	brcs	.-14     	; 0x5be <strrev+0x10>
 5cc:	08 95       	ret

000005ce <_exit>:
 5ce:	f8 94       	cli

000005d0 <__stop_program>:
 5d0:	ff cf       	rjmp	.-2      	; 0x5d0 <__stop_program>
